@model  IEnumerable<TicketTracker.Models.CardViewModel>
@{
    ViewBag.Title = "Card View";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
    <a href="@Url.Action("TaskView", "Home", new { id = 0 })" class="btn btn-success btn-circle btn-lg">
        <i class="fas fa-plus-circle"></i>
    </a>
</div>

<!-- Content Row -->
<div class="row">

    <!-- Pending Requests Card-->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-warning shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                            Tasks
                        </div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">@{var count = Model.Count() - Model.Count(mdl => mdl.progress.TrimEnd(' ').Equals("User Acceptance"));}@count</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-comments fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@{
    var index = 0;
    while (index < Model.Count())
    {
        <!-- Content Row -->
        <div class="row">
        @{
            var innerIndex = index;
            while (innerIndex < Model.Count() && innerIndex < index + 4)
            {
                <div class="col-xl-3 col-md-6 mb-4">
                    <!-- Approach -->
                    <div class="card shadow mb-4">
                        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                            <h6 class="m-0 font-weight-bold text-primary">@Model.ElementAt(innerIndex).name.TrimEnd(' ')</h6>
                            <div class="dropdown no-arrow">
                                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                                </a>
                                <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                                    <a class="dropdown-item" href="@Url.Action("TaskView", "Home", new  { id = Model.ElementAt(innerIndex).id.ToString().TrimEnd(' ') })">View/Edit</a>
                                    @{ var actionID = "CardView_All_" + Model.ElementAt(innerIndex).id + "_Delete_0";}
                                    <a class="dropdown-item" href="@Url.Action("Action", "Home", new  { id =  actionID})">Delete</a>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            @{ if (String.Concat(Model.ElementAt(innerIndex).progress.Where(c => !Char.IsWhiteSpace(c))).Equals("Backlog"))
                                {
                                    <a href="#" class="btn btn-light btn-icon-split">
                                        <span class="text">Backlog</span>
                                    </a>
                                }
                                else if (String.Concat(Model.ElementAt(innerIndex).progress.Where(c => !Char.IsWhiteSpace(c))).Equals("ReqGathering"))
                                {
                                    <a href="#" class="btn btn-secondary btn-icon-split">
                                        <span class="text">Req Gathering</span>
                                    </a>
                                }
                                else if (String.Concat(Model.ElementAt(innerIndex).progress.Where(c => !Char.IsWhiteSpace(c))).Equals("InProgress"))
                                {
                                    <a href="#" class="btn btn-info btn-icon-split">
                                        <span class="text">In Progress</span>
                                    </a>
                                }
                                else if (String.Concat(Model.ElementAt(innerIndex).progress.Where(c => !Char.IsWhiteSpace(c))).Equals("QA"))
                                {
                                    <a href="#" class="btn btn-warning btn-icon-split">
                                        <span class="text">QA</span>
                                    </a>
                                }
                                else if (String.Concat(Model.ElementAt(innerIndex).progress.Where(c => !Char.IsWhiteSpace(c))).Equals("Deployed"))
                                {
                                    <a href="#" class="btn btn-primary btn-icon-split">
                                        <span class="text">Deployed</span>
                                    </a>
                                }
                                else if (String.Concat(Model.ElementAt(innerIndex).progress.Where(c => !Char.IsWhiteSpace(c))).Equals("UserAcceptance"))
                                {
                                    <a href="#" class="btn btn-success btn-icon-split">
                                        <span class="text">User Acceptance</span>
                                    </a>
                                }
                            }
                            <p>@Model.ElementAt(innerIndex).description</p>
                        </div>
                    </div>
                </div>
                innerIndex += 1;
            }
        }
        </div>
        index += 4;
    }
}